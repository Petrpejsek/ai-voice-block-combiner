from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
from pydub import AudioSegment
import os
import json
import uuid
from datetime import datetime, timedelta
import re
import subprocess
import tempfile
import requests
from dotenv import load_dotenv
from werkzeug.utils import secure_filename
from gpt_utils import call_openai, create_narration_prompt

# Naƒçte environment variables z .env souboru
load_dotenv()

app = Flask(__name__)
CORS(app)  # Povol√≠ komunikaci s frontend aplikac√≠

# Slo≈æky pro soubory
UPLOAD_FOLDER = '../uploads'
OUTPUT_FOLDER = '../output'
BACKGROUNDS_FOLDER = '../uploads/backgrounds'
VIDEO_BACKGROUNDS_FOLDER = '../uploads/video_backgrounds'
PROJECTS_FOLDER = '../projects'

# Vytvo≈ô√≠ slo≈æky pokud neexistuj√≠
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(OUTPUT_FOLDER, exist_ok=True)
os.makedirs(BACKGROUNDS_FOLDER, exist_ok=True)
os.makedirs(VIDEO_BACKGROUNDS_FOLDER, exist_ok=True)
os.makedirs(PROJECTS_FOLDER, exist_ok=True)

# Povolen√© typy obr√°zk≈Ø pro pozad√≠
ALLOWED_IMAGE_EXTENSIONS = {'png', 'jpg', 'jpeg'}
# Povolen√© typy vide√≠ pro pozad√≠
ALLOWED_VIDEO_EXTENSIONS = {'mp4', 'mov'}

def allowed_image_file(filename):
    """
    Kontrola, zda je soubor povolen√Ω obr√°zek
    """
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_IMAGE_EXTENSIONS

def allowed_video_file(filename):
    """
    Kontrola, zda je soubor povolen√© video
    """
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_VIDEO_EXTENSIONS

def natural_sort_key(filename):
    """
    Tato funkce umo≈æn√≠ spr√°vn√© ≈ôazen√≠ soubor≈Ø podle ƒç√≠sel v n√°zvu
    Nap≈ô√≠klad: Tesla_1.mp3, Tesla_2.mp3, Tesla_10.mp3
    """
    return [int(text) if text.isdigit() else text.lower() for text in re.split('([0-9]+)', filename)]

def generate_voice_with_elevenlabs(text, voice_id, api_key, filename):
    """
    Generuje hlasov√Ω soubor pomoc√≠ ElevenLabs API
    """
    try:
        # ElevenLabs API endpoint
        url = f"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}"
        
        # Headers pro API request
        headers = {
            "Accept": "audio/mpeg",
            "Content-Type": "application/json",
            "xi-api-key": api_key
        }
        
        # Data pro generov√°n√≠ hlasu
        data = {
            "text": text,
            "model_id": "eleven_multilingual_v2",
            "voice_settings": {
                "stability": 0.5,
                "similarity_boost": 0.5,
                "style": 0.0,
                "use_speaker_boost": True
            }
        }
        
        print(f"üé§ Generuji hlas pro: {filename}")
        print(f"üìù Text: {text[:100]}...")
        
        # Vol√°n√≠ ElevenLabs API
        response = requests.post(url, json=data, headers=headers, timeout=30)
        
        if response.status_code == 200:
            # Ulo≈æ√≠ audio soubor
            file_path = os.path.join(UPLOAD_FOLDER, filename)
            with open(file_path, 'wb') as f:
                f.write(response.content)
            
            print(f"‚úÖ Hlas √∫spƒõ≈°nƒõ vygenerov√°n: {filename}")
            return True, f"Hlas √∫spƒõ≈°nƒõ vygenerov√°n: {filename}"
        else:
            error_msg = f"ElevenLabs API chyba: {response.status_code} - {response.text}"
            print(f"‚ùå {error_msg}")
            return False, error_msg
            
    except requests.exceptions.Timeout:
        error_msg = "ƒåasov√Ω limit API vol√°n√≠ byl p≈ôekroƒçen"
        print(f"‚ùå {error_msg}")
        return False, error_msg
    except Exception as e:
        error_msg = f"Neoƒçek√°van√° chyba p≈ôi generov√°n√≠ hlasu: {str(e)}"
        print(f"‚ùå {error_msg}")
        return False, error_msg

def generate_voice_with_agent(text, agent_id, api_key, filename):
    """
    P≈ôevede agent_id na voice_id a pou≈æije klasick√© TTS (bez komplikac√≠)
    """
    print(f"ü§ñ P≈ôev√°d√≠m agent_id na voice_id pro: {filename}")
    
    # JEDNODUCH√â MAPOV√ÅN√ç - ≈æ√°dn√© fallbacky, ≈æ√°dn√© komplikace
    agent_to_voice = {
        "agent_01jysnj4zgfqgsncz1ww8t6eyd": "pNInz6obpgDQGcFmaJgB",  # Tesla -> Adam
        "agent_01jysp1gvmfe8s696kdhbmgzg8": "21m00Tcm4TlvDq8ikWAM",  # Socrates -> Rachel
    }
    
    voice_id = agent_to_voice.get(agent_id, "pNInz6obpgDQGcFmaJgB")  # Default Adam
    print(f"‚úÖ Pou≈æ√≠v√°m voice_id: {voice_id}")
    
    # Pou≈æije spolehliv√© klasick√© TTS
    return generate_voice_with_elevenlabs(text, voice_id, api_key, filename)

def generate_srt_content(audio_segments_info, subtitle_data):
    """
    Generuje obsah .srt souboru z informac√≠ o audio segmentech
    """
    def format_timedelta_for_srt(td):
        """Konvertuje timedelta na spr√°vn√Ω SRT form√°t HH:MM:SS,mmm"""
        total_seconds = int(td.total_seconds())
        milliseconds = int(td.microseconds / 1000)
        
        hours = total_seconds // 3600
        minutes = (total_seconds % 3600) // 60
        seconds = total_seconds % 60
        
        return f"{hours:02d}:{minutes:02d}:{seconds:02d},{milliseconds:03d}"
    
    srt_content = []
    current_time = timedelta(0)
    
    for i, segment_info in enumerate(audio_segments_info, 1):
        filename = segment_info['filename']
        duration = segment_info['duration']
        
        # Najde text pro tento soubor
        text = subtitle_data.get(filename, f"Audio block {i}")
        
        # ƒåas zaƒç√°tku a konce
        start_time = current_time
        end_time = current_time + timedelta(milliseconds=duration)
        
        # Spr√°vn√Ω form√°t ƒçasu pro SRT (HH:MM:SS,mmm)
        start_str = format_timedelta_for_srt(start_time)
        end_str = format_timedelta_for_srt(end_time)
        
        # P≈ôid√° SRT blok
        srt_content.append(f"{i}")
        srt_content.append(f"{start_str} --> {end_str}")
        srt_content.append(text)
        srt_content.append("")  # Pr√°zdn√Ω ≈ô√°dek
        
        # Aktualizuje ƒças pro dal≈°√≠ segment (vƒçetnƒõ pauzy)
        current_time = end_time + timedelta(milliseconds=segment_info.get('pause_after', 0))
    
    return '\n'.join(srt_content)

def generate_video_with_waveform(audio_file_path, srt_file_path, output_video_path):
    """
    Generuje MP4 video s waveform vizualizac√≠ a titulky pomoc√≠ ffmpeg
    """
    try:
        # Z√°kladn√≠ ffmpeg p≈ô√≠kaz pro vytvo≈ôen√≠ videa s waveform a titulky
        cmd = [
            'ffmpeg',
            '-y',  # P≈ôep√≠≈°e v√Ωstupn√≠ soubor pokud existuje
            '-i', audio_file_path,  # Input audio soubor
            '-filter_complex',
            '[0:a]showwaves=s=1920x1080:mode=line:colors=0x3b82f6:rate=30,format=yuv420p[v]',
            '-map', '[v]',  # Mapuje video stream
            '-map', '0:a',  # Mapuje audio stream
            '-c:v', 'libx264',  # Video kodek
            '-c:a', 'aac',      # Audio kodek
            '-preset', 'medium', # Kvalita/rychlost komprese
            '-crf', '23',       # Konstanta kvalita
            '-r', '30',         # Frame rate
            output_video_path
        ]
        
        # Spust√≠ ffmpeg p≈ô√≠kaz s prodlou≈æen√Ωm timeoutem pro dlouh√© audio soubory
        print(f"üé¨ Generuji video s waveform: {' '.join(cmd)}")
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
        
        if result.returncode != 0:
            print(f"‚ùå Chyba p≈ôi generov√°n√≠ videa: {result.stderr}")
            return False, f"FFmpeg chyba: {result.stderr}"
        
        # Pokud existuje SRT soubor, p≈ôid√° titulky jako druh√Ω krok
        if srt_file_path and os.path.exists(srt_file_path):
            temp_video = output_video_path + '.temp.mp4'
            os.rename(output_video_path, temp_video)
            
            cmd_subtitles = [
                'ffmpeg',
                '-y',
                '-i', temp_video,
                '-vf', f'subtitles={srt_file_path}:force_style=\'FontSize=16,PrimaryColour=&Hffffff,OutlineColour=&H000000,Outline=2,Shadow=1\'',
                '-c:a', 'copy',  # Kop√≠ruje audio bez re-enk√≥dov√°n√≠
                output_video_path
            ]
            
            print(f"üìù P≈ôid√°v√°m titulky: {' '.join(cmd_subtitles)}")
            result = subprocess.run(cmd_subtitles, capture_output=True, text=True, timeout=600)
            
            # Sma≈æe doƒçasn√Ω soubor
            if os.path.exists(temp_video):
                os.remove(temp_video)
            
            if result.returncode != 0:
                print(f"‚ùå Chyba p≈ôi p≈ôid√°v√°n√≠ titulk≈Ø: {result.stderr}")
                return False, f"FFmpeg chyba p≈ôi titulc√≠ch: {result.stderr}"
        
        print(f"‚úÖ Video √∫spƒõ≈°nƒõ vygenerov√°no: {output_video_path}")
        return True, "Video √∫spƒõ≈°nƒõ vygenerov√°no"
        
    except subprocess.TimeoutExpired:
        return False, "ƒåasov√Ω limit pro generov√°n√≠ videa byl p≈ôekroƒçen"
    except Exception as e:
        print(f"‚ùå Neoƒçek√°van√° chyba p≈ôi generov√°n√≠ videa: {str(e)}")
        return False, f"Neoƒçek√°van√° chyba: {str(e)}"

def generate_video_with_background(audio_file_path, background_image_path, srt_file_path, output_video_path):
    """
    Generuje MP4 video s obr√°zkem pozad√≠ a titulky pomoc√≠ ffmpeg
    """
    try:
        # Z√°kladn√≠ ffmpeg p≈ô√≠kaz pro vytvo≈ôen√≠ videa s obr√°zkem pozad√≠
        cmd = [
            'ffmpeg',
            '-y',  # P≈ôep√≠≈°e v√Ωstupn√≠ soubor pokud existuje
            '-loop', '1',  # Opakuje obr√°zek
            '-i', background_image_path,  # Input obr√°zek pozad√≠
            '-i', audio_file_path,  # Input audio soubor
            '-c:v', 'libx264',  # Video kodek
            '-c:a', 'aac',      # Audio kodek
            '-shortest',        # Ukonƒç√≠ video kdy≈æ skonƒç√≠ nejkrat≈°√≠ stream (audio)
            '-preset', 'medium', # Kvalita/rychlost komprese
            '-crf', '23',       # Konstanta kvalita
            '-r', '30',         # Frame rate
            '-pix_fmt', 'yuv420p',  # Pixel form√°t pro kompatibilitu
            output_video_path
        ]
        
        # Spust√≠ ffmpeg p≈ô√≠kaz s prodlou≈æen√Ωm timeoutem pro dlouh√© audio soubory
        print(f"üé¨ Generuji video s pozad√≠m: {' '.join(cmd)}")
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
        
        if result.returncode != 0:
            print(f"‚ùå Chyba p≈ôi generov√°n√≠ videa: {result.stderr}")
            return False, f"FFmpeg chyba: {result.stderr}"
        
        # Pokud existuje SRT soubor, p≈ôid√° titulky jako druh√Ω krok
        if srt_file_path and os.path.exists(srt_file_path):
            temp_video = output_video_path + '.temp.mp4'
            os.rename(output_video_path, temp_video)
            
            cmd_subtitles = [
                'ffmpeg',
                '-y',
                '-i', temp_video,
                '-vf', f'subtitles={srt_file_path}:force_style=\'FontSize=16,PrimaryColour=&Hffffff,OutlineColour=&H000000,Outline=2,Shadow=1\'',
                '-c:a', 'copy',  # Kop√≠ruje audio bez re-enk√≥dov√°n√≠
                output_video_path
            ]
            
            print(f"üìù P≈ôid√°v√°m titulky k videu s pozad√≠m: {' '.join(cmd_subtitles)}")
            result = subprocess.run(cmd_subtitles, capture_output=True, text=True, timeout=600)
            
            # Sma≈æe doƒçasn√Ω soubor
            if os.path.exists(temp_video):
                os.remove(temp_video)
            
            if result.returncode != 0:
                print(f"‚ùå Chyba p≈ôi p≈ôid√°v√°n√≠ titulk≈Ø: {result.stderr}")
                return False, f"FFmpeg chyba p≈ôi titulc√≠ch: {result.stderr}"
        
        print(f"‚úÖ Video s pozad√≠m √∫spƒõ≈°nƒõ vygenerov√°no: {output_video_path}")
        return True, "Video s pozad√≠m √∫spƒõ≈°nƒõ vygenerov√°no"
        
    except subprocess.TimeoutExpired:
        return False, "ƒåasov√Ω limit pro generov√°n√≠ videa byl p≈ôekroƒçen"
    except Exception as e:
        print(f"‚ùå Neoƒçek√°van√° chyba p≈ôi generov√°n√≠ videa: {str(e)}")
        return False, f"Neoƒçek√°van√° chyba: {str(e)}"

def generate_video_with_video_background(audio_file_path, background_video_path, srt_file_path, output_video_path):
    """
    Generuje MP4 video s video pozad√≠m a titulky pomoc√≠ ffmpeg
    """
    try:
        # Z√°kladn√≠ ffmpeg p≈ô√≠kaz pro vytvo≈ôen√≠ videa s video pozad√≠m
        cmd = [
            'ffmpeg',
            '-y',  # P≈ôep√≠≈°e v√Ωstupn√≠ soubor pokud existuje
            '-stream_loop', '-1',  # Opakuje video pozad√≠ nekoneƒçnƒõ
            '-i', background_video_path,  # Input video pozad√≠
            '-i', audio_file_path,  # Input audio soubor
            '-c:v', 'libx264',  # Video kodek
            '-c:a', 'aac',      # Audio kodek
            '-shortest',        # Ukonƒç√≠ video kdy≈æ skonƒç√≠ nejkrat≈°√≠ stream (audio)
            '-preset', 'medium', # Kvalita/rychlost komprese
            '-crf', '23',       # Konstanta kvalita
            '-r', '30',         # Frame rate
            '-pix_fmt', 'yuv420p',  # Pixel form√°t pro kompatibilitu
            output_video_path
        ]
        
        # Spust√≠ ffmpeg p≈ô√≠kaz s prodlou≈æen√Ωm timeoutem pro dlouh√© audio soubory
        print(f"üé• Generuji video s video pozad√≠m: {' '.join(cmd)}")
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
        
        if result.returncode != 0:
            print(f"‚ùå Chyba p≈ôi generov√°n√≠ videa: {result.stderr}")
            return False, f"FFmpeg chyba: {result.stderr}"
        
        # Pokud existuje SRT soubor, p≈ôid√° titulky jako druh√Ω krok
        if srt_file_path and os.path.exists(srt_file_path):
            temp_video = output_video_path + '.temp.mp4'
            os.rename(output_video_path, temp_video)
            
            cmd_subtitles = [
                'ffmpeg',
                '-y',
                '-i', temp_video,
                '-vf', f'subtitles={srt_file_path}:force_style=\'FontSize=16,PrimaryColour=&Hffffff,OutlineColour=&H000000,Outline=2,Shadow=1\'',
                '-c:a', 'copy',  # Kop√≠ruje audio bez re-enk√≥dov√°n√≠
                output_video_path
            ]
            
            print(f"üìù P≈ôid√°v√°m titulky k videu s video pozad√≠m: {' '.join(cmd_subtitles)}")
            result = subprocess.run(cmd_subtitles, capture_output=True, text=True, timeout=600)
            
            # Sma≈æe doƒçasn√Ω soubor
            if os.path.exists(temp_video):
                os.remove(temp_video)
            
            if result.returncode != 0:
                print(f"‚ùå Chyba p≈ôi p≈ôid√°v√°n√≠ titulk≈Ø: {result.stderr}")
                return False, f"FFmpeg chyba p≈ôi titulc√≠ch: {result.stderr}"
        
        print(f"‚úÖ Video s video pozad√≠m √∫spƒõ≈°nƒõ vygenerov√°no: {output_video_path}")
        return True, "Video s video pozad√≠m √∫spƒõ≈°nƒõ vygenerov√°no"
        
    except subprocess.TimeoutExpired:
        return False, "ƒåasov√Ω limit pro generov√°n√≠ videa byl p≈ôekroƒçen"
    except Exception as e:
        print(f"‚ùå Neoƒçek√°van√° chyba p≈ôi generov√°n√≠ videa: {str(e)}")
        return False, f"Neoƒçek√°van√° chyba: {str(e)}"

@app.route('/api/upload', methods=['POST'])
def upload_files():
    """
    Endpoint pro nahr√°n√≠ soubor≈Ø a jejich zpracov√°n√≠
    """
    try:
        # Z√≠sk√° parametry z formul√°≈ôe
        pause_duration = float(request.form.get('pause_duration', 0.6)) * 1000  # P≈ôevede na milisekundy
        generate_subtitles = request.form.get('generate_subtitles') == 'true'
        generate_video = request.form.get('generate_video') == 'true'
        background_filename = request.form.get('background_filename')  # Obr√°zek pozad√≠ pro video
        video_background_filename = request.form.get('video_background_filename')  # Video pozad√≠ pro video
        subtitle_data = {}
        file_volumes = {}  # Slovn√≠k pro hlasitosti soubor≈Ø (v dB)
        
        if generate_subtitles and 'subtitle_json' in request.form:
            subtitle_data = json.loads(request.form.get('subtitle_json'))
        
        # Naƒçte nastaven√≠ hlasitosti soubor≈Ø
        if 'file_volumes' in request.form:
            try:
                file_volumes = json.loads(request.form.get('file_volumes'))
                print(f"üîä Nastaven√≠ hlasitosti: {file_volumes}")
                print(f"üîä Typ hlasitost√≠: {[(k, type(v), v) for k, v in file_volumes.items()]}")
            except json.JSONDecodeError:
                print("‚ö†Ô∏è Neplatn√Ω JSON pro hlasitosti soubor≈Ø")
                file_volumes = {}
        
        # Zpracuje nahran√© soubory
        uploaded_files = request.files.getlist('audio_files')
        intro_file = request.files.get('intro_file')
        outro_file = request.files.get('outro_file')
        
        if not uploaded_files:
            return jsonify({'error': 'Nebyly nahr√°ny ≈æ√°dn√© audio soubory'}), 400
        
        # Vytvo≈ô√≠ seznam audio segment≈Ø pro spojen√≠
        audio_segments = []
        audio_segments_info = []
        
        # P≈ôid√° intro pokud existuje
        if intro_file and intro_file.filename:
            intro_path = os.path.join(UPLOAD_FOLDER, f"intro_{uuid.uuid4().hex}.mp3")
            intro_file.save(intro_path)
            intro_audio = AudioSegment.from_mp3(intro_path)
            audio_segments.append(intro_audio)
            audio_segments_info.append({
                'filename': 'intro.mp3',
                'duration': len(intro_audio),
                'pause_after': pause_duration
            })
            os.remove(intro_path)  # Sma≈æe doƒçasn√Ω soubor
        
        # OPRAVA: Zachov√° po≈ôad√≠ soubor≈Ø jak byly nahr√°ny m√≠sto abecedn√≠ho ≈ôazen√≠
        # Se≈ôad√≠ a zpracuje hlavn√≠ audio soubory
        file_list = [(f.filename, f) for f in uploaded_files if f.filename]
        # ODSTRANƒöNO: file_list.sort(key=lambda x: natural_sort_key(x[0]))
        # Zachov√° p≈Øvodn√≠ po≈ôad√≠ z frontendu
        
        for i, (filename, file) in enumerate(file_list):
            # Zkontroluje, jestli je to pr√°zdn√Ω soubor (existuj√≠c√≠ na serveru)
            if hasattr(file, 'content_length') and file.content_length == 0:
                # Existuj√≠c√≠ soubor - naƒçte p≈ô√≠mo z uploads
                existing_path = os.path.join(UPLOAD_FOLDER, filename)
                if os.path.exists(existing_path):
                    print(f"üìÅ Pou≈æ√≠v√° existuj√≠c√≠ soubor: {filename}")
                    
                    # OPRAVA: Zkontroluje a p≈ôevede problematick√© MP3 soubory s timeoutem
                    try:
                        audio = AudioSegment.from_mp3(existing_path)
                    except Exception as e:
                        print(f"‚ö†Ô∏è Soubor {filename} je po≈°kozen√Ω, pokou≈°√≠m se opravit...")
                        # P≈ôevede soubor pomoc√≠ FFmpeg s timeoutem
                        temp_fixed = existing_path + '_fixed.mp3'
                        cmd = ['ffmpeg', '-y', '-i', existing_path, '-acodec', 'libmp3lame', '-ab', '128k', temp_fixed]
                        
                        try:
                            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
                            
                            if result.returncode == 0:
                                # Nahrad√≠ p≈Øvodn√≠ soubor opraven√Ωm
                                os.replace(temp_fixed, existing_path)
                                audio = AudioSegment.from_mp3(existing_path)
                                print(f"‚úÖ Soubor {filename} √∫spƒõ≈°nƒõ opraven")
                            else:
                                print(f"‚ùå Nelze opravit soubor {filename}: {result.stderr}")
                                return jsonify({'error': f'Soubor {filename} je po≈°kozen√Ω a nelze ho opravit'}), 400
                        except subprocess.TimeoutExpired:
                            print(f"‚ùå Timeout p≈ôi opravƒõ souboru {filename}")
                            # Sma≈æe p≈ô√≠padn√Ω ƒç√°steƒçnƒõ vytvo≈ôen√Ω soubor
                            if os.path.exists(temp_fixed):
                                os.remove(temp_fixed)
                            return jsonify({'error': f'Timeout p≈ôi opravƒõ souboru {filename}'}), 400
                else:
                    return jsonify({'error': f'Existuj√≠c√≠ soubor {filename} nebyl nalezen na serveru'}), 400
            else:
                # Ulo≈æ√≠ nahran√Ω soubor doƒçasnƒõ
                temp_path = os.path.join(UPLOAD_FOLDER, f"temp_{uuid.uuid4().hex}.mp3")
                file.save(temp_path)
                
                # Naƒçte audio
                audio = AudioSegment.from_mp3(temp_path)
                
                # Sma≈æe doƒçasn√Ω soubor
                os.remove(temp_path)
                print(f"üì§ Zpracov√°n nahran√Ω soubor: {filename}")
            
            # Aplikuje nastaven√≠ hlasitosti pokud je definov√°no
            volume_adjustment = file_volumes.get(filename, 0)
            print(f"üîä Soubor {filename}: nastaven√° hlasitost {volume_adjustment:+.1f}dB")
            if volume_adjustment != 0:
                audio = audio + volume_adjustment  # pydub pou≈æ√≠v√° + pro zmƒõnu hlasitosti v dB
                print(f"‚úÖ Aplikov√°na hlasitost {filename}: {volume_adjustment:+.1f}dB")
            else:
                print(f"‚è∏Ô∏è Bez zmƒõny hlasitosti pro {filename} (0dB)")
            
            audio_segments.append(audio)
            
            # P≈ôid√° informace o segmentu
            pause_after = pause_duration if i < len(file_list) - 1 else 0  # Bez pauzy po posledn√≠m
            audio_segments_info.append({
                'filename': filename,
                'duration': len(audio),
                'pause_after': pause_after
            })
        
        # P≈ôid√° outro pokud existuje
        if outro_file and outro_file.filename:
            outro_path = os.path.join(UPLOAD_FOLDER, f"outro_{uuid.uuid4().hex}.mp3")
            outro_file.save(outro_path)
            outro_audio = AudioSegment.from_mp3(outro_path)
            audio_segments.append(outro_audio)
            audio_segments_info.append({
                'filename': 'outro.mp3',
                'duration': len(outro_audio),
                'pause_after': 0
            })
            os.remove(outro_path)
        
        # Spoj√≠ v≈°echny audio segmenty s pauzami
        final_audio = AudioSegment.empty()
        
        for i, audio in enumerate(audio_segments):
            final_audio += audio
            
            # P≈ôid√° pauzu pokud nen√≠ posledn√≠ segment
            if i < len(audio_segments) - 1:
                pause = AudioSegment.silent(duration=pause_duration)
                final_audio += pause
        
        # Ulo≈æ√≠ fin√°ln√≠ audio soubor
        output_filename = f"final_output_{uuid.uuid4().hex}.mp3"
        output_path = os.path.join(OUTPUT_FOLDER, output_filename)
        final_audio.export(output_path, format="mp3")
        
        response_data = {
            'success': True,
            'audio_file': output_filename,
            'duration': len(final_audio) / 1000,  # V sekund√°ch
            'segments_count': len(uploaded_files)
        }
        
        # Generuje titulky pokud je to po≈æadov√°no
        srt_path = None
        if generate_subtitles:
            srt_content = generate_srt_content(audio_segments_info, subtitle_data)
            srt_filename = f"final_output_{uuid.uuid4().hex}.srt"
            srt_path = os.path.join(OUTPUT_FOLDER, srt_filename)
            
            with open(srt_path, 'w', encoding='utf-8') as f:
                f.write(srt_content)
            
            response_data['subtitle_file'] = srt_filename
        
        # Generuje video pokud je to po≈æadov√°no
        if generate_video:
            video_filename = f"final_output_{uuid.uuid4().hex}.mp4"
            video_path = os.path.join(OUTPUT_FOLDER, video_filename)
            
            # Priorita: 1) Video pozad√≠, 2) Obr√°zek pozad√≠, 3) Waveform
            if video_background_filename:
                # Cesta k video pozad√≠
                video_background_path = os.path.join(VIDEO_BACKGROUNDS_FOLDER, video_background_filename)
                
                if os.path.exists(video_background_path):
                    print(f"üé• Pou≈æ√≠v√°m video pozad√≠: {video_background_filename}")
                    
                    # Generuje video s video pozad√≠m a titulky
                    video_success, video_message = generate_video_with_video_background(
                        output_path, 
                        video_background_path,
                        srt_path if generate_subtitles else None, 
                        video_path
                    )
                else:
                    video_success = False
                    video_message = f"Video pozad√≠ '{video_background_filename}' nebylo nalezeno"
            elif background_filename:
                # Cesta k obr√°zku pozad√≠
                background_path = os.path.join(BACKGROUNDS_FOLDER, background_filename)
                
                if os.path.exists(background_path):
                    print(f"üñºÔ∏è Pou≈æ√≠v√°m obr√°zek pozad√≠: {background_filename}")
                    
                    # Generuje video s obr√°zkem pozad√≠ a titulky
                    video_success, video_message = generate_video_with_background(
                        output_path, 
                        background_path,
                        srt_path if generate_subtitles else None, 
                        video_path
                    )
                else:
                    video_success = False
                    video_message = f"Obr√°zek pozad√≠ '{background_filename}' nebyl nalezen"
            else:
                print("üåä Pou≈æ√≠v√°m waveform pozad√≠")
                
                # Generuje video s waveform a titulky (p≈Øvodn√≠ funkcionalita)
                video_success, video_message = generate_video_with_waveform(
                    output_path, 
                    srt_path if generate_subtitles else None, 
                    video_path
                )
            
            if video_success:
                response_data['video_file'] = video_filename
                response_data['video_message'] = video_message
                if video_background_filename:
                    response_data['video_background_used'] = video_background_filename
                elif background_filename:
                    response_data['background_used'] = background_filename
            else:
                # Pokud video generov√°n√≠ sel≈æe, nezastav√≠ to cel√Ω proces
                response_data['video_error'] = video_message
                print(f"‚ö†Ô∏è Video se nepoda≈ôilo vygenerovat: {video_message}")
        
        return jsonify(response_data)
        
    except Exception as e:
        return jsonify({'error': f'Chyba p≈ôi zpracov√°n√≠: {str(e)}'}), 500

@app.route('/api/generate-voices', methods=['POST'])
def generate_voices():
    """
    Endpoint pro generov√°n√≠ hlas≈Ø pomoc√≠ ElevenLabs API
    """
    try:
        # Z√≠sk√° data z requestu
        print(f"üîç Request headers: {dict(request.headers)}")
        print(f"üîç Request content type: {request.content_type}")
        print(f"üîç Request method: {request.method}")
        
        data = request.get_json()
        print(f"üîç Received data: {data}")
        print(f"üîç Data type: {type(data)}")
        
        if not data:
            print("‚ùå No data received!")
            return jsonify({'error': 'Nebyla posl√°na ≈æ√°dn√° data'}), 400
        
        # Povinn√© parametry
        voice_blocks = data.get('voice_blocks')
        api_key = data.get('api_key')
        
        if not voice_blocks:
            return jsonify({'error': 'Chyb√≠ definice hlasov√Ωch blok≈Ø'}), 400
        
        if not api_key:
            return jsonify({'error': 'Chyb√≠ ElevenLabs API kl√≠ƒç'}), 400
        
        # Kontrola form√°tu voice_blocks
        if not isinstance(voice_blocks, dict):
            return jsonify({'error': 'Hlasov√© bloky mus√≠ b√Ωt ve form√°tu JSON objektu'}), 400
        
        # üîß NORMALIZACE ƒå√çSLOV√ÅN√ç - zajist√≠ konzistentn√≠ form√°t 01, 02, 03
        voice_blocks = normalize_block_numbering(voice_blocks)
        
        generated_files = []
        errors = []
        
        # OPRAVA: Zachov√° po≈ôad√≠ z JSON m√≠sto abecedn√≠ho ≈ôazen√≠
        # Generuje ka≈æd√Ω hlasov√Ω blok v po≈ôad√≠ jak byly definov√°ny
        for block_name, block_config in voice_blocks.items():
            try:
                # Validace konfigurace bloku
                text = block_config.get('text')
                # Akceptuje oba form√°ty: 'voice_id' i 'voice'
                voice_id = block_config.get('voice_id') or block_config.get('voice')
                agent_id = block_config.get('agent_id')
                
                if not text:
                    errors.append(f"Blok '{block_name}': chyb√≠ text")
                    continue
                
                # Kontrola, ≈æe m√° buƒè voice_id nebo agent_id (ale ne oba)
                if voice_id and agent_id:
                    errors.append(f"Blok '{block_name}': nesm√≠ obsahovat souƒçasnƒõ voice_id a agent_id")
                    continue
                    
                if not voice_id and not agent_id:
                    errors.append(f"Blok '{block_name}': chyb√≠ voice_id nebo agent_id")
                    continue
                
                # Vytvo≈ô√≠ n√°zev souboru
                filename = f"{block_name}.mp3"
                
                # Generuje hlas podle typu (agent_id vs voice_id)
                if agent_id:
                    # Pou≈æije ElevenLabs TTS API
                    success, message = generate_voice_with_agent(
                        text=text,
                        agent_id=agent_id,
                        api_key=api_key,
                        filename=filename
                    )
                else:
                    # Pou≈æije klasick√© text-to-speech API
                    success, message = generate_voice_with_elevenlabs(
                        text=text,
                        voice_id=voice_id,
                        api_key=api_key,
                        filename=filename
                    )
                
                if success:
                    generated_files.append({
                        'filename': filename,
                        'block_name': block_name,
                        'message': message,
                        'original_text': text  # P≈ôid√° p≈Øvodn√≠ text pro lep≈°√≠ debugging
                    })
                else:
                    errors.append(f"Blok '{block_name}': {message}")
                    
            except Exception as e:
                errors.append(f"Blok '{block_name}': {str(e)}")
        
        # P≈ôiprav√≠ odpovƒõƒè
        response_data = {
            'success': len(generated_files) > 0,
            'generated_files': generated_files,
            'total_generated': len(generated_files),
            'total_requested': len(voice_blocks)
        }
        
        if errors:
            response_data['errors'] = errors
            response_data['error_count'] = len(errors)
        
        # Urƒç√≠ HTTP status kod
        if len(generated_files) == 0:
            status_code = 400
            response_data['message'] = 'Nepoda≈ôilo se vygenerovat ≈æ√°dn√Ω hlasov√Ω soubor'
        elif len(errors) > 0:
            status_code = 207  # Multi-status
            response_data['message'] = f'Vygenerov√°no {len(generated_files)}/{len(voice_blocks)} hlasov√Ωch soubor≈Ø'
        else:
            status_code = 200
            response_data['message'] = f'V≈°ech {len(generated_files)} hlasov√Ωch soubor≈Ø bylo √∫spƒõ≈°nƒõ vygenerov√°no'
        
        return jsonify(response_data), status_code
        
    except Exception as e:
        return jsonify({'error': f'Chyba p≈ôi zpracov√°n√≠: {str(e)}'}), 500

@app.route('/api/files')
def list_files():
    """
    Vr√°t√≠ seznam dostupn√Ωch audio soubor≈Ø ve uploads slo≈æce
    """
    try:
        files = []
        if os.path.exists(UPLOAD_FOLDER):
            for filename in os.listdir(UPLOAD_FOLDER):
                if filename.endswith(('.mp3', '.wav', '.m4a')):
                    file_path = os.path.join(UPLOAD_FOLDER, filename)
                    file_size = os.path.getsize(file_path)
                    files.append({
                        'filename': filename,
                        'size': file_size,
                        'modified': os.path.getmtime(file_path)
                    })
        
        # Se≈ôad√≠ podle n√°zvu
        files.sort(key=lambda x: natural_sort_key(x['filename']))
        
        return jsonify({
            'files': files,
            'count': len(files)
        })
    except Exception as e:
        return jsonify({'error': f'Chyba p≈ôi naƒç√≠t√°n√≠ soubor≈Ø: {str(e)}'}), 500

@app.route('/api/download/<filename>')
def download_file(filename):
    """
    St√°hne soubor z uploads nebo output slo≈æky
    """
    try:
        # Kontrola bezpeƒçnosti - pouze povolen√© soubory
        if not filename.endswith(('.mp3', '.wav', '.srt', '.mp4')):
            return jsonify({'error': 'Nepovolen√Ω typ souboru'}), 400
        
        # Nejd≈ô√≠v zkus√≠ output slo≈æku (v√Ωsledn√© soubory)
        output_path = os.path.join(OUTPUT_FOLDER, filename)
        if os.path.exists(output_path):
            response = send_file(output_path, as_attachment=True)
            # P≈ôid√° CORS headers
            response.headers.add('Access-Control-Allow-Origin', '*')
            response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
            response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
            return response
        
        # Pak zkus√≠ uploads slo≈æku (vstupn√≠ soubory)
        upload_path = os.path.join(UPLOAD_FOLDER, filename)
        if os.path.exists(upload_path):
            response = send_file(upload_path, as_attachment=True)
            # P≈ôid√° CORS headers
            response.headers.add('Access-Control-Allow-Origin', '*')
            response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
            response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
            return response
        
        return jsonify({'error': 'Soubor nenalezen'}), 404
        
    except Exception as e:
        return jsonify({'error': f'Chyba p≈ôi stahov√°n√≠: {str(e)}'}), 500

@app.route('/api/upload-background', methods=['POST'])
def upload_background():
    """
    Endpoint pro nahr√°n√≠ obr√°zk≈Ø pozad√≠
    """
    try:
        # Kontrola, zda byl soubor odesl√°n
        if 'background_file' not in request.files:
            return jsonify({'error': 'Nebyl vybr√°n ≈æ√°dn√Ω soubor'}), 400
        
        file = request.files['background_file']
        
        # Kontrola, zda m√° soubor n√°zev
        if file.filename == '':
            return jsonify({'error': 'Nebyl vybr√°n ≈æ√°dn√Ω soubor'}), 400
        
        # Kontrola typu souboru
        if not allowed_image_file(file.filename):
            return jsonify({'error': 'Nepovolen√Ω typ souboru. Povolen√©: .png, .jpg, .jpeg'}), 400
        
        # Zabezpeƒçen√≠ n√°zvu souboru
        filename = secure_filename(file.filename)
        
        # Zkr√°cen√≠ n√°zvu pokud je p≈ô√≠li≈° dlouh√Ω
        name, ext = os.path.splitext(filename)
        # Maximum 50 znak≈Ø pro n√°zev (bez extension a timestamp)
        if len(name) > 50:
            name = name[:50]
        
        # P≈ôid√°n√≠ timestamp pro jedineƒçnost
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        unique_filename = f"{name}_{timestamp}{ext}"
        
        # Ulo≈æen√≠ souboru
        file_path = os.path.join(BACKGROUNDS_FOLDER, unique_filename)
        file.save(file_path)
        
        # Z√≠sk√°n√≠ velikosti souboru
        file_size = os.path.getsize(file_path)
        
        print(f"üñºÔ∏è Nahr√°n obr√°zek pozad√≠: {unique_filename} ({file_size} bytes)")
        
        return jsonify({
            'success': True,
            'filename': unique_filename,
            'original_name': filename,
            'size': file_size,
            'url': f'/api/backgrounds/{unique_filename}',
            'message': 'Obr√°zek pozad√≠ byl √∫spƒõ≈°nƒõ nahr√°n'
        })
        
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi nahr√°v√°n√≠ pozad√≠: {str(e)}")
        return jsonify({'error': f'Chyba p≈ôi nahr√°v√°n√≠: {str(e)}'}), 500

@app.route('/api/list-backgrounds')
def list_backgrounds():
    """
    Vr√°t√≠ seznam dostupn√Ωch obr√°zk≈Ø pozad√≠
    """
    try:
        backgrounds = []
        
        if os.path.exists(BACKGROUNDS_FOLDER):
            for filename in os.listdir(BACKGROUNDS_FOLDER):
                if allowed_image_file(filename):
                    file_path = os.path.join(BACKGROUNDS_FOLDER, filename)
                    file_size = os.path.getsize(file_path)
                    file_mtime = os.path.getmtime(file_path)
                    
                    backgrounds.append({
                        'filename': filename,
                        'size': file_size,
                        'modified': file_mtime,
                        'url': f'/api/backgrounds/{filename}',
                        'thumbnail_url': f'/api/backgrounds/{filename}'  # Prozat√≠m stejn√© jako pln√° velikost
                    })
        
        # Se≈ôad√≠ podle data √∫pravy (nejnovƒõj≈°√≠ prvn√≠)
        backgrounds.sort(key=lambda x: x['modified'], reverse=True)
        
        return jsonify({
            'backgrounds': backgrounds,
            'count': len(backgrounds)
        })
        
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ pozad√≠: {str(e)}")
        return jsonify({'error': f'Chyba p≈ôi naƒç√≠t√°n√≠ pozad√≠: {str(e)}'}), 500

@app.route('/api/backgrounds/<filename>')
def serve_background(filename):
    """
    Vr√°t√≠ obr√°zek pozad√≠ ze slo≈æky backgrounds
    """
    try:
        # Zabezpeƒçen√≠ n√°zvu souboru
        filename = secure_filename(filename)
        
        # Kontrola typu souboru
        if not allowed_image_file(filename):
            return jsonify({'error': 'Nepovolen√Ω typ souboru'}), 400
        
        file_path = os.path.join(BACKGROUNDS_FOLDER, filename)
        
        if os.path.exists(file_path):
            return send_file(file_path, mimetype='image/jpeg')
        else:
            return jsonify({'error': 'Obr√°zek nenalezen'}), 404
            
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi servov√°n√≠ pozad√≠: {str(e)}")
        return jsonify({'error': f'Chyba p≈ôi servov√°n√≠ obr√°zku: {str(e)}'}), 500

@app.route('/api/upload-video-background', methods=['POST'])
def upload_video_background():
    """
    Endpoint pro nahr√°n√≠ video pozad√≠
    """
    try:
        # Kontrola, zda byl soubor odesl√°n
        if 'video_background_file' not in request.files:
            return jsonify({'error': 'Nebyl vybr√°n ≈æ√°dn√Ω video soubor'}), 400
        
        file = request.files['video_background_file']
        
        # Kontrola, zda m√° soubor n√°zev
        if file.filename == '':
            return jsonify({'error': 'Nebyl vybr√°n ≈æ√°dn√Ω video soubor'}), 400
        
        # Kontrola typu souboru
        if not allowed_video_file(file.filename):
            return jsonify({'error': 'Nepovolen√Ω typ souboru. Povolen√©: .mp4, .mov'}), 400
        
        # Kontrola velikosti souboru (100MB limit)
        file.seek(0, 2)  # P≈ôejde na konec souboru
        file_size = file.tell()
        file.seek(0)  # Vr√°t√≠ se na zaƒç√°tek
        
        if file_size > 100 * 1024 * 1024:  # 100MB v bytes
            return jsonify({'error': 'Soubor je p≈ô√≠li≈° velk√Ω. Maximum je 100MB'}), 400
        
        # Zabezpeƒçen√≠ n√°zvu souboru
        filename = secure_filename(file.filename)
        
        # Zkr√°cen√≠ n√°zvu pokud je p≈ô√≠li≈° dlouh√Ω
        name, ext = os.path.splitext(filename)
        # Maximum 50 znak≈Ø pro n√°zev (bez extension a timestamp)
        if len(name) > 50:
            name = name[:50]
        
        # P≈ôid√°n√≠ timestamp pro jedineƒçnost
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        unique_filename = f"{name}_{timestamp}{ext}"
        
        # Ulo≈æen√≠ souboru
        file_path = os.path.join(VIDEO_BACKGROUNDS_FOLDER, unique_filename)
        file.save(file_path)
        
        print(f"üé• Nahr√°no video pozad√≠: {unique_filename} ({file_size} bytes)")
        
        return jsonify({
            'success': True,
            'filename': unique_filename,
            'original_name': filename,
            'size': file_size,
            'url': f'/api/video-backgrounds/{unique_filename}',
            'message': 'Video pozad√≠ bylo √∫spƒõ≈°nƒõ nahr√°no'
        })
        
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi nahr√°v√°n√≠ video pozad√≠: {str(e)}")
        return jsonify({'error': f'Chyba p≈ôi nahr√°v√°n√≠: {str(e)}'}), 500

@app.route('/api/list-video-backgrounds')
def list_video_backgrounds():
    """
    Vr√°t√≠ seznam dostupn√Ωch video pozad√≠
    """
    try:
        video_backgrounds = []
        
        if os.path.exists(VIDEO_BACKGROUNDS_FOLDER):
            for filename in os.listdir(VIDEO_BACKGROUNDS_FOLDER):
                if allowed_video_file(filename):
                    file_path = os.path.join(VIDEO_BACKGROUNDS_FOLDER, filename)
                    file_size = os.path.getsize(file_path)
                    file_mtime = os.path.getmtime(file_path)
                    
                    video_backgrounds.append({
                        'filename': filename,
                        'size': file_size,
                        'modified': file_mtime,
                        'url': f'/api/video-backgrounds/{filename}'
                    })
        
        # Se≈ôad√≠ podle data √∫pravy (nejnovƒõj≈°√≠ prvn√≠)
        video_backgrounds.sort(key=lambda x: x['modified'], reverse=True)
        
        return jsonify({
            'video_backgrounds': video_backgrounds,
            'count': len(video_backgrounds)
        })
        
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ video pozad√≠: {str(e)}")
        return jsonify({'error': f'Chyba p≈ôi naƒç√≠t√°n√≠ video pozad√≠: {str(e)}'}), 500

@app.route('/api/video-backgrounds/<filename>')
def serve_video_background(filename):
    """
    Vr√°t√≠ video pozad√≠ ze slo≈æky video_backgrounds
    """
    try:
        # Zabezpeƒçen√≠ n√°zvu souboru
        filename = secure_filename(filename)
        
        # Kontrola typu souboru
        if not allowed_video_file(filename):
            return jsonify({'error': 'Nepovolen√Ω typ souboru'}), 400
        
        file_path = os.path.join(VIDEO_BACKGROUNDS_FOLDER, filename)
        
        if os.path.exists(file_path):
            # Nastav√≠ spr√°vn√Ω MIME type podle p≈ô√≠pony
            if filename.lower().endswith('.mp4'):
                mimetype = 'video/mp4'
            elif filename.lower().endswith('.mov'):
                mimetype = 'video/quicktime'
            else:
                mimetype = 'video/mp4'  # fallback
                
            return send_file(file_path, mimetype=mimetype)
        else:
            return jsonify({'error': 'Video nenalezeno'}), 404
            
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi servov√°n√≠ video pozad√≠: {str(e)}")
        return jsonify({'error': f'Chyba p≈ôi servov√°n√≠ videa: {str(e)}'}), 500

@app.route('/api/generate-narration', methods=['POST'])
def generate_narration():
    """
    Endpoint pro generov√°n√≠ dokument√°rn√≠ narrace pomoc√≠ OpenAI GPT-4o
    """
    try:
        # Z√≠sk√° data z POST requestu
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'Nen√≠ posl√°no ≈æ√°dn√© JSON data'}), 400
        
        # Kontrola povinn√Ωch pol√≠
        topic = data.get('topic')
        if not topic:
            return jsonify({'error': 'Pole "topic" je povinn√©'}), 400
        
        # Voliteln√© pole pro styl (m√° v√Ωchoz√≠ hodnotu)
        style = data.get('style', 'Cinematic, BBC-style, serious tone')
        
        print(f"üé¨ Generuji dokument√°rn√≠ naraci...")
        print(f"üìù T√©ma: {topic}")
        print(f"üé≠ Styl: {style}")
        
        # Vytvo≈ô√≠ prompt pro OpenAI
        prompt = create_narration_prompt(topic, style)
        
        # Zavol√° OpenAI API
        result = call_openai(prompt)
        
        # Kontrola √∫spƒõ≈°nosti vol√°n√≠
        if 'error' in result:
            return jsonify({
                'error': f'Chyba p≈ôi generov√°n√≠ narrace: {result["error"]}',
                'details': result.get('raw_content', '≈Ω√°dn√© detaily')
            }), 500
        
        # Z√≠sk√° vygenerovanou naraci
        narration_data = result['data']
        
        # Vytvo≈ô√≠ slug z t√©matu pro slo≈æku
        slug = re.sub(r'[^a-zA-Z0-9\s-]', '', topic.lower())
        slug = re.sub(r'\s+', '-', slug.strip())
        slug = slug[:50]  # Maxim√°lnƒõ 50 znak≈Ø
        
        # Vytvo≈ô√≠ slo≈æku pro projekt
        project_folder = os.path.join(PROJECTS_FOLDER, slug)
        os.makedirs(project_folder, exist_ok=True)
        
        # Ulo≈æ√≠ naraci do JSON souboru
        narration_file_path = os.path.join(project_folder, 'narration.json')
        with open(narration_file_path, 'w', encoding='utf-8') as f:
            json.dump(narration_data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Narrace √∫spƒõ≈°nƒõ vygenerov√°na a ulo≈æena")
        print(f"üìÅ Projekt ulo≈æen do: {project_folder}")
        print(f"üìä Poƒçet narativn√≠ch blok≈Ø: {len(narration_data)}")
        
        # Vytvo≈ô√≠ metadata soubor
        metadata = {
            'topic': topic,
            'style': style,
            'generated_at': datetime.now().isoformat(),
            'slug': slug,
            'blocks_count': len(narration_data),
            'file_path': narration_file_path
        }
        
        metadata_file_path = os.path.join(project_folder, 'metadata.json')
        with open(metadata_file_path, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
        
        return jsonify({
            'success': True,
            'message': 'Dokument√°rn√≠ narrace byla √∫spƒõ≈°nƒõ vygenerov√°na',
            'data': {
                'narration': narration_data,
                'metadata': metadata,
                'project_folder': project_folder,
                'narration_file': narration_file_path
            }
        })
        
    except Exception as e:
        error_msg = f"Neoƒçek√°van√° chyba p≈ôi generov√°n√≠ narrace: {str(e)}"
        print(f"‚ùå {error_msg}")
        return jsonify({'error': error_msg}), 500

@app.route('/api/generated-projects')
def list_generated_projects():
    """
    Vr√°t√≠ seznam vygenerovan√Ωch projekt≈Ø (zat√≠m pr√°zdn√Ω - projekty se ukl√°daj√≠ pouze v frontend)
    """
    try:
        # Pro nyn√≠ vrac√≠me pr√°zdn√Ω seznam, proto≈æe projekty se ukl√°daj√≠ v frontend localStorage
        # V budoucnu by se mohly ukl√°dat na backend
        return jsonify({
            'projects': [],
            'count': 0,
            'message': 'Projekty se ukl√°daj√≠ lok√°lnƒõ v prohl√≠≈æeƒçi'
        })
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ projekt≈Ø: {str(e)}")
        return jsonify({'error': f'Chyba p≈ôi naƒç√≠t√°n√≠ projekt≈Ø: {str(e)}'}), 500

@app.route('/api/openai-assistant', methods=['POST'])
def openai_assistant():
    """
    Obecn√Ω OpenAI asistent endpoint pro r≈Øzn√© typy dotaz≈Ø
    """
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'Chyb√≠ JSON data'}), 400
        
        assistant_type = data.get('assistant_type', 'general')
        prompt = data.get('prompt', '')
        
        if not prompt.strip():
            return jsonify({'error': 'Prompt nem≈Ø≈æe b√Ωt pr√°zdn√Ω'}), 400
        
        print(f"ü§ñ OpenAI Asistent po≈æadavek - typ: {assistant_type}")
        print(f"üìù Prompt: {prompt[:100]}...")
        
        # Definuje syst√©mov√© prompty pro r≈Øzn√© typy asistent≈Ø
        system_prompts = {
            'general': "Jste u≈æiteƒçn√Ω AI asistent. Odpov√≠dejte jasnƒõ a informativnƒõ na dotazy u≈æivatele v ƒçesk√©m jazyce.",
            'creative': "Jste kreativn√≠ asistent specializovan√Ω na psan√≠, n√°pady a umƒõleckou tvorbu. Buƒète kreativn√≠ a inspirativn√≠. Odpov√≠dejte v ƒçe≈°tinƒõ.",
            'technical': "Jste technick√Ω asistent specializovan√Ω na programov√°n√≠, technologie a ≈ôe≈°en√≠ probl√©m≈Ø. Poskytujte praktick√© a p≈ôesn√© rady. Odpov√≠dejte v ƒçe≈°tinƒõ.",
            'podcast': "Jste asistent specializovan√Ω na tvorbu podcast≈Ø, dialog≈Ø a audio obsahu. Pom√°h√°te s pl√°nov√°n√≠m, strukturou a obsahem. Odpov√≠dejte v ƒçe≈°tinƒõ.",
            'research': "Jste v√Ωzkumn√Ω asistent specializovan√Ω na anal√Ωzu dat, v√Ωzkum a faktick√© informace. Buƒète p≈ôesn√≠ a zalo≈æen√≠ na datech. Odpov√≠dejte v ƒçe≈°tinƒõ."
        }
        
        system_prompt = system_prompts.get(assistant_type, system_prompts['general'])
        
        # Vol√° obecnƒõj≈°√≠ verzi OpenAI API (bez JSON form√°tu)
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            return jsonify({'error': 'OpenAI API kl√≠ƒç nen√≠ nastaven'}), 500
        
        # P≈ô√≠m√© vol√°n√≠ OpenAI API bez JSON omezen√≠
        url = "https://api.openai.com/v1/chat/completions"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }
        
        data_payload = {
            "model": "gpt-4o",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.7,
            "max_tokens": 2000
        }
        
        response = requests.post(url, json=data_payload, headers=headers, timeout=60)
        
        if response.status_code == 200:
            result = response.json()
            assistant_response = result['choices'][0]['message']['content']
            
            print(f"‚úÖ OpenAI asistent √∫spƒõ≈°nƒõ odpovƒõdƒõl")
            return jsonify({
                'success': True,
                'response': assistant_response,
                'assistant_type': assistant_type
            })
        else:
            error_msg = f"OpenAI API chyba: {response.status_code} - {response.text}"
            print(f"‚ùå {error_msg}")
            return jsonify({'error': error_msg}), 500
            
    except requests.exceptions.Timeout:
        error_msg = "ƒåasov√Ω limit OpenAI API vol√°n√≠ byl p≈ôekroƒçen"
        print(f"‚ùå {error_msg}")
        return jsonify({'error': error_msg}), 408
    except Exception as e:
        error_msg = f"Neoƒçek√°van√° chyba: {str(e)}"
        print(f"‚ùå {error_msg}")
        return jsonify({'error': error_msg}), 500

@app.route('/api/health')
def health_check():
    """
    Jednoduch√Ω health check endpoint
    """
    return jsonify({'status': 'Backend funguje spr√°vnƒõ!'})

@app.route('/api/generate-image', methods=['POST'])
def generate_image():
    """
    Endpoint pro generov√°n√≠ obr√°zk≈Ø pomoc√≠ DALL-E 3
    """
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'Chyb√≠ JSON data'}), 400
        
        # Kontrola povinn√Ωch pol√≠
        prompt = data.get('prompt')
        api_key = data.get('api_key')
        
        if not prompt:
            return jsonify({'error': 'Pole "prompt" je povinn√©'}), 400
        
        if not api_key:
            return jsonify({'error': 'OpenAI API kl√≠ƒç je povinn√Ω'}), 400
        
        # Voliteln√© parametry
        size = data.get('size', '1024x1024')  # 1024x1024, 1792x1024, nebo 1024x1792
        quality = data.get('quality', 'standard')  # standard nebo hd
        
        print(f"üé® Generuji obr√°zek...")
        print(f"üìù Prompt: {prompt}")
        print(f"üìè Velikost: {size}")
        print(f"‚ú® Kvalita: {quality}")
        
        # DALL-E 3 API call
        url = "https://api.openai.com/v1/images/generations"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }
        
        payload = {
            "model": "dall-e-3",
            "prompt": prompt,
            "n": 1,
            "size": size,
            "quality": quality,
            "response_format": "url"
        }
        
        response = requests.post(url, json=payload, headers=headers, timeout=60)
        
        if response.status_code == 200:
            result = response.json()
            image_url = result['data'][0]['url']
            revised_prompt = result['data'][0].get('revised_prompt', prompt)
            
            # St√°hne obr√°zek a ulo≈æ√≠ ho lok√°lnƒõ
            image_response = requests.get(image_url, timeout=30)
            if image_response.status_code == 200:
                # Vytvo≈ô√≠ n√°zev souboru
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"dalle_image_{timestamp}.png"
                filepath = os.path.join(UPLOAD_FOLDER, filename)
                
                # Ulo≈æ√≠ obr√°zek
                with open(filepath, 'wb') as f:
                    f.write(image_response.content)
                
                print(f"‚úÖ Obr√°zek √∫spƒõ≈°nƒõ vygenerov√°n: {filename}")
                
                return jsonify({
                    'success': True,
                    'message': 'Obr√°zek √∫spƒõ≈°nƒõ vygenerov√°n',
                    'data': {
                        'filename': filename,
                        'original_prompt': prompt,
                        'revised_prompt': revised_prompt,
                        'size': size,
                        'quality': quality,
                        'url': image_url,
                        'local_path': filepath
                    }
                })
            else:
                return jsonify({'error': 'Chyba p≈ôi stahov√°n√≠ vygenerovan√©ho obr√°zku'}), 500
        else:
            error_msg = f"DALL-E API chyba: {response.status_code} - {response.text}"
            print(f"‚ùå {error_msg}")
            return jsonify({'error': error_msg}), 500
            
    except requests.exceptions.Timeout:
        error_msg = "ƒåasov√Ω limit DALL-E API vol√°n√≠ byl p≈ôekroƒçen"
        print(f"‚ùå {error_msg}")
        return jsonify({'error': error_msg}), 408
    except Exception as e:
        error_msg = f"Neoƒçek√°van√° chyba p≈ôi generov√°n√≠ obr√°zku: {str(e)}"
        print(f"‚ùå {error_msg}")
        return jsonify({'error': error_msg}), 500

@app.route('/api/openai-assistant-call', methods=['POST'])
def openai_assistant_call():
    """
    Endpoint pro vol√°n√≠ OpenAI Assistant API
    """
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'Chyb√≠ JSON data'}), 400
        
        # Kontrola povinn√Ωch pol√≠
        assistant_id = data.get('assistant_id')
        prompt = data.get('prompt')
        api_key = data.get('api_key')
        
        if not assistant_id:
            return jsonify({'error': 'Assistant ID je povinn√©'}), 400
        
        if not prompt:
            return jsonify({'error': 'Prompt je povinn√Ω'}), 400
        
        if not api_key:
            return jsonify({'error': 'OpenAI API kl√≠ƒç je povinn√Ω'}), 400
        
        # Validace form√°tu Assistant ID
        if not assistant_id.startswith('asst_'):
            return jsonify({'error': 'Assistant ID mus√≠ zaƒç√≠nat "asst_"'}), 400
        
        print(f"ü§ñ Vol√°m OpenAI Assistant...")
        print(f"üìù Assistant ID: {assistant_id}")
        print(f"üí¨ Prompt: {prompt[:100]}...")
        
        # OpenAI Assistants API vol√°n√≠
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}",
            "OpenAI-Beta": "assistants=v2"
        }
        
        # Step 1: Vytvo≈ô thread
        thread_response = requests.post(
            "https://api.openai.com/v1/threads",
            headers=headers,
            json={},
            timeout=30
        )
        
        if thread_response.status_code != 200:
            return jsonify({'error': f'Chyba p≈ôi vytv√°≈ôen√≠ thread: {thread_response.text}'}), 500
        
        thread_id = thread_response.json()['id']
        
        # Step 2: P≈ôidej zpr√°vu do thread
        message_response = requests.post(
            f"https://api.openai.com/v1/threads/{thread_id}/messages",
            headers=headers,
            json={
                "role": "user",
                "content": prompt
            },
            timeout=30
        )
        
        if message_response.status_code != 200:
            return jsonify({'error': f'Chyba p≈ôi p≈ôid√°v√°n√≠ zpr√°vy: {message_response.text}'}), 500
        
        # Step 3: Spus≈• assistant
        run_response = requests.post(
            f"https://api.openai.com/v1/threads/{thread_id}/runs",
            headers=headers,
            json={
                "assistant_id": assistant_id
            },
            timeout=30
        )
        
        if run_response.status_code != 200:
            return jsonify({'error': f'Chyba p≈ôi spou≈°tƒõn√≠ assistant: {run_response.text}'}), 500
        
        run_id = run_response.json()['id']
        
        # Step 4: ƒåekej na dokonƒçen√≠ (polling)
        max_attempts = 60  # 60 sekund max
        for attempt in range(max_attempts):
            status_response = requests.get(
                f"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}",
                headers=headers,
                timeout=10
            )
            
            if status_response.status_code != 200:
                return jsonify({'error': f'Chyba p≈ôi kontrole stavu: {status_response.text}'}), 500
            
            status = status_response.json()['status']
            
            if status == 'completed':
                break
            elif status in ['failed', 'cancelled', 'expired']:
                return jsonify({'error': f'Assistant run selh√°l se stavem: {status}'}), 500
            
            # ƒåekej 1 sekundu p≈ôed dal≈°√≠m pokusem
            import time
            time.sleep(1)
        else:
            return jsonify({'error': 'ƒåasov√Ω limit pro dokonƒçen√≠ assistant bƒõhu p≈ôekroƒçen'}), 408
        
        # Step 5: Z√≠skej odpovƒõƒè
        messages_response = requests.get(
            f"https://api.openai.com/v1/threads/{thread_id}/messages",
            headers=headers,
            timeout=30
        )
        
        if messages_response.status_code != 200:
            return jsonify({'error': f'Chyba p≈ôi z√≠sk√°v√°n√≠ zpr√°v: {messages_response.text}'}), 500
        
        messages = messages_response.json()['data']
        
        # Najdi posledn√≠u odpovƒõƒè od assistanta
        assistant_message = None
        for message in messages:
            if message['role'] == 'assistant' and message['content']:
                assistant_message = message['content'][0]['text']['value']
                break
        
        if not assistant_message:
            return jsonify({'error': 'Nepoda≈ôilo se z√≠skat odpovƒõƒè od assistanta'}), 500
        
        print(f"‚úÖ OpenAI Assistant √∫spƒõ≈°nƒõ odpovƒõdƒõl")
        
        return jsonify({
            'success': True,
            'message': 'OpenAI Assistant √∫spƒõ≈°nƒõ odpovƒõdƒõl',
            'data': {
                'assistant_id': assistant_id,
                'thread_id': thread_id,
                'run_id': run_id,
                'response': assistant_message,
                'original_prompt': prompt
            }
        })
        
    except requests.exceptions.Timeout:
        error_msg = "ƒåasov√Ω limit OpenAI Assistant API vol√°n√≠ byl p≈ôekroƒçen"
        print(f"‚ùå {error_msg}")
        return jsonify({'error': error_msg}), 408
    except Exception as e:
        error_msg = f"Neoƒçek√°van√° chyba p≈ôi vol√°n√≠ OpenAI Assistant: {str(e)}"
        print(f"‚ùå {error_msg}")
        return jsonify({'error': error_msg}), 500

@app.route('/api/generate-video-structure', methods=['POST'])
def generate_video_structure():
    """
    SPR√ÅVN√Å IMPLEMENTACE U≈ΩIVATELOVA ZAD√ÅN√ç:
    - JEDEN segment = 1800 slov (ne v√≠ce segment≈Ø)
    - Backend po≈°le 3 zpr√°vy: 600 + 600 + 600 slov
    - Frontend dostane JEDEN segment k zpracov√°n√≠
    """
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'Chyb√≠ JSON data'}), 400
        
        # Pouze z√°kladn√≠ data
        topic = data.get('topic', 'electricity and innovation')
        target_minutes = data.get('target_minutes', 12)
        detail_assistant_id = data.get('detail_assistant_id')
        api_key = data.get('api_key')
        
        if not api_key:
            return jsonify({'error': 'OpenAI API kl√≠ƒç je povinn√Ω'}), 400
            
        if not detail_assistant_id:
            return jsonify({'error': 'Detail Assistant ID je povinn√©'}), 400
        
        # DYNAMICK√ù POƒåET SLOV z frontendu
        target_words = data.get('target_words', target_minutes * 150)  # 150 slov/minutu jako fallback
        TARGET_TOTAL = target_words
        
        print(f"üéØ SPR√ÅVN√Å IMPLEMENTACE ZAD√ÅN√ç")
        print(f"üìù Topic: {topic}")
        print(f"‚è±Ô∏è C√≠l: {target_minutes} minut = {TARGET_TOTAL} slov")
        print(f"üìä Segment≈Ø: 1 (JEDEN segment s {TARGET_TOTAL} slovy)")
        print(f"ü§ñ Detail Assistant: {detail_assistant_id}")
        
        # POUZE JEDEN SEGMENT - backend ho rozdƒõl√≠ na ƒç√°sti podle poƒçtu slov
        segments = [
            {
                'id': 'main_segment',
                'target_words': TARGET_TOTAL,
                'main_topic': topic,
                'title': f'Tesla vs Socrates: {topic}',
                'duration_minutes': target_minutes
            }
        ]
        
        return jsonify({
            'success': True,
            'message': f'Struktura p≈ôipravena - 1 segment s {TARGET_TOTAL} slovy',
            'data': {
                'detail_assistant_id': detail_assistant_id,
                'segments': segments,
                'video_context': {
                    'main_topic': topic,
                    'target_minutes': target_minutes,
                    'target_words': TARGET_TOTAL,
                    'total_segments': 1
                }
            }
        })
        
    except Exception as e:
        error_msg = f"Chyba p≈ôi p≈ô√≠pravƒõ struktury: {str(e)}"
        print(f"‚ùå {error_msg}")
        return jsonify({'error': error_msg}), 500

@app.route('/api/generate-segment-content', methods=['POST'])
def generate_segment_content():
    """
    UNIVERZ√ÅLN√ç GENEROV√ÅN√ç OBSAHU:
    - PODCAST: Tesla vs Socrates dialog (2 hlasy)
    - DOCUMENT: Continuous narration (1 hlas)
    Kategorie se urƒçuje z assistant_category v po≈æadavku
    """
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'Chyb√≠ JSON data'}), 400
        
        # Kontrola povinn√Ωch pol√≠
        detail_assistant_id = data.get('detail_assistant_id')
        segment_info = data.get('segment_info')
        api_key = data.get('api_key')
        assistant_category = data.get('assistant_category', 'podcast')  # default: podcast
        narrator_voice_id = data.get('narrator_voice_id', 'fb6f5b20hmCY0fO9Gr8v')  # default voice
        
        if not segment_info or not api_key:
            return jsonify({'error': 'Chyb√≠ povinn√° data'}), 400
        
        segment_id = segment_info.get('id', 'unknown')
        topic = segment_info.get('main_topic', 'electricity and innovation')
        target_words = segment_info.get('target_words', 1800)  # Z√≠skej poƒçet slov ze segment_info
        
        print(f"üéØ UNIVERZ√ÅLN√ç GENEROV√ÅN√ç")
        print(f"üìù Topic: {topic}")
        print(f"üé≠ Kategorie: {assistant_category.upper()}")
        if assistant_category == 'document':
            print(f"üé§ Narrator Voice ID: {narrator_voice_id}")
        print(f"‚è±Ô∏è C√≠l: JEDEN segment = {target_words} slov")
        
        # DYNAMICK√â ROZDƒöLEN√ç NA ƒå√ÅSTI
        WORDS_PER_PART = 600  # Konstantn√≠ velikost ƒç√°sti
        PARTS_COUNT = max(1, (target_words + WORDS_PER_PART - 1) // WORDS_PER_PART)  # Ceiling division
        TARGET_TOTAL = target_words
        
        print(f"üìä Metoda: {PARTS_COUNT} ƒç√°st√≠ po ~{WORDS_PER_PART} slovech = {TARGET_TOTAL} slov")
        
        # OpenAI API setup
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}",
            "OpenAI-Beta": "assistants=v2"
        }
        
        # ≈òE≈†EN√ç PROBL√âMU: Vytvo≈ô nov√Ω Detail Assistant pro ka≈æd√© zad√°n√≠
        # T√≠m se zajist√≠, ≈æe si nepamatuje p≈ôedchoz√≠ konverzace
        print(f"üÜï Vytv√°≈ô√≠m nov√Ω Detail Assistant pro ƒçerstv√Ω obsah...")
        
        # Vytvo≈ô nov√Ω Detail Assistant
        assistant_data = {
            "model": "gpt-4o",
            "name": f"Detail Assistant - {assistant_category.title()}",
            "instructions": f"""You are a Detail Assistant specialized in generating {'podcast dialogues' if assistant_category == 'podcast' else 'document narrations'}.

Your task is to generate content in JSON format with precise word counts.

For PODCAST mode:
- Generate Tesla vs Socrates philosophical dialogues
- Use Tesla_01, Socrates_01, Tesla_02, Socrates_02, etc.
- Tesla voice_id: "fb6f5b20hmCY0fO9Gr8v"
- Socrates voice_id: "Ezn5SsWzN9rYHvvWrFnm"

For DOCUMENT mode:
- Generate continuous narration
- Use Narrator_01, Narrator_02, Narrator_03, etc.
- Use provided narrator voice_id

Always:
- Count words precisely
- Generate exactly the requested word count
- Output only valid JSON
- Each text block should be 35-45 words
- Maintain engaging, high-quality content""",
            "tools": []
        }
        
        create_assistant_resp = requests.post(
            "https://api.openai.com/v1/assistants",
            headers=headers,
            json=assistant_data,
            timeout=30
        )
        
        if create_assistant_resp.status_code != 200:
            return jsonify({'error': f'Chyba p≈ôi vytv√°≈ôen√≠ Detail Assistant: {create_assistant_resp.text}'}), 500
        
        new_detail_assistant_id = create_assistant_resp.json()['id']
        print(f"‚úÖ Vytvo≈ôen nov√Ω Detail Assistant: {new_detail_assistant_id}")
        
        # Pou≈æij nov√Ω Assistant ID m√≠sto star√©ho
        detail_assistant_id = new_detail_assistant_id
        
        # Helper funkce pro komunikaci s assistantem
        def send_to_assistant(thread_id: str, message: str, assistant_id: str):
            # P≈ôidej zpr√°vu
            requests.post(
                f"https://api.openai.com/v1/threads/{thread_id}/messages",
                headers=headers,
                json={"role": "user", "content": message},
                timeout=30
            )
            # Spus≈• run
            run_resp = requests.post(
                f"https://api.openai.com/v1/threads/{thread_id}/runs",
                headers=headers,
                json={"assistant_id": assistant_id},
                timeout=30
            )
            run_id = run_resp.json()['id']
            
            # ƒåekej na dokonƒçen√≠
            for _ in range(180):
                status_resp = requests.get(
                    f"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}",
                    headers=headers,
                    timeout=10
                )
                status = status_resp.json()['status']
                if status == 'completed':
                    break
                if status in ['failed', 'cancelled', 'expired']:
                    raise RuntimeError(f"Assistant run failed: {status}")
                import time; time.sleep(1)
            
            # Z√≠skej odpovƒõƒè
            msg_resp = requests.get(
                f"https://api.openai.com/v1/threads/{thread_id}/messages",
                headers=headers,
                timeout=30
            )
            for m in msg_resp.json()['data']:
                if m['role'] == 'assistant' and m['content']:
                    return m['content'][0]['text']['value']
            raise RuntimeError("No assistant response found")
        
        # JSON parsing
        import json, re
        def clean_json(text: str):
            text = text.strip()
            if text.startswith('```json'):
                text = re.sub(r'^```json', '', text).strip()
            if text.endswith('```'):
                text = re.sub(r'```$', '', text).strip()
            elif text.startswith('```'):
                text = text.replace('```', '').strip()
            return text
        
        # D≈ÆLE≈ΩIT√â: Vytvo≈ô NOV√ù thread pro ka≈æd√© zad√°n√≠ (aby se nepamatoval p≈ôedchoz√≠ obsah)
        thread_resp = requests.post("https://api.openai.com/v1/threads", headers=headers, json={}, timeout=30)
        thread_id = thread_resp.json()['id']
        print(f"üÜï Vytvo≈ôen nov√Ω thread: {thread_id[:8]}... (pro ƒçerstv√Ω obsah)")
        
        # IMPLEMENTACE PRO OBA TYPY
        combined_json = {}
        total_words = 0
        
        print(f"üìä Pl√°n: {PARTS_COUNT} ƒç√°st√≠ po {WORDS_PER_PART} slovech = {TARGET_TOTAL} slov")
        
        # POSTUPN√â GENEROV√ÅN√ç S DYNAMICK√ùM POƒåTEM ƒå√ÅST√ç
        for part_num in range(1, PARTS_COUNT + 1):
            print(f"üîÑ ƒå√°st {part_num}/{PARTS_COUNT}: {WORDS_PER_PART} slov")
            
            if part_num == 1:
                # PRVN√ç PROMPT - podle kategorie
                if assistant_category == 'podcast':
                    # PODCAST: Tesla vs Socrates dialog
                    import random
                    import time
                    unique_seed = f"{topic}_{int(time.time())}_{random.randint(1000, 9999)}"
                    
                    prompt = f"""Generate Tesla vs Socrates dialogue about: {topic}

UNIQUE REQUEST ID: {unique_seed}

CRITICAL REQUIREMENT: Generate exactly {WORDS_PER_PART} words.

Format: JSON with Tesla_01, Socrates_01, Tesla_02, Socrates_02, etc.
Each dialogue block should be 35-45 words.

Create engaging philosophical dialogue between Tesla and Socrates about {topic}.
Start numbering from 01 (Tesla_01, Socrates_01, Tesla_02, Socrates_02, etc.).

IMPORTANT: This is a FRESH conversation. Do not repeat any previous content.
Explore different aspects of {topic} - be creative and original.

You need approximately {WORDS_PER_PART // 40} dialogue blocks to reach {WORDS_PER_PART} words.

Output ONLY valid JSON:
{{
  "Tesla_01": {{"voice_id": "fb6f5b20hmCY0fO9Gr8v", "text": "..."}},
  "Socrates_01": {{"voice_id": "Ezn5SsWzN9rYHvvWrFnm", "text": "..."}},
  "Tesla_02": {{"voice_id": "fb6f5b20hmCY0fO9Gr8v", "text": "..."}},
  "Socrates_02": {{"voice_id": "Ezn5SsWzN9rYHvvWrFnm", "text": "..."}},
  ...
}}

IMPORTANT: Count your words carefully and generate exactly {WORDS_PER_PART} words total."""
                
                else:  # document
                    # DOCUMENT: Continuous narration
                    import random
                    import time
                    unique_seed = f"{topic}_{int(time.time())}_{random.randint(1000, 9999)}"
                    
                    prompt = f"""Generate continuous narration about: {topic}

UNIQUE REQUEST ID: {unique_seed}

CRITICAL REQUIREMENT: Generate exactly {WORDS_PER_PART} words.

Format: JSON with Narrator_01, Narrator_02, Narrator_03, etc.
Each narration block should be 35-45 words.

Create engaging, informative narration about {topic}.
Start numbering from 01 (Narrator_01, Narrator_02, Narrator_03, etc.).

IMPORTANT: This is a FRESH narration. Do not repeat any previous content.
Explore different aspects of {topic} - be creative and original.

You need approximately {WORDS_PER_PART // 40} narration blocks to reach {WORDS_PER_PART} words.

Output ONLY valid JSON:
{{
  "Narrator_01": {{"voice_id": "{narrator_voice_id}", "text": "..."}},
  "Narrator_02": {{"voice_id": "{narrator_voice_id}", "text": "..."}},
  "Narrator_03": {{"voice_id": "{narrator_voice_id}", "text": "..."}},
  "Narrator_04": {{"voice_id": "{narrator_voice_id}", "text": "..."}},
  ...
}}

IMPORTANT: Count your words carefully and generate exactly {WORDS_PER_PART} words total."""
                
                print(f"üì§ Pos√≠l√°m PRVN√ç PROMPT: {WORDS_PER_PART} slov ({assistant_category})")
                
            else:
                # ZJISTI POSLEDN√ç ƒå√çSLO Z P≈òEDCHOZ√çCH ƒå√ÅST√ç - OPRAVEN√Å LOGIKA
                if assistant_category == 'podcast':
                    # PODCAST: Tesla a Socrates
                    last_tesla_num = 0
                    last_socrates_num = 0
                    
                    # Projdi v≈°echny kl√≠ƒçe a najdi nejvy≈°≈°√≠ ƒç√≠sla
                    for key in combined_json.keys():
                        if key.startswith('Tesla_'):
                            try:
                                # O≈°et≈ôi r≈Øzn√© form√°ty ƒç√≠slov√°n√≠ (01, 1, atd.)
                                num_str = key.split('_')[1]
                                num = int(num_str)
                                last_tesla_num = max(last_tesla_num, num)
                            except (IndexError, ValueError):
                                continue
                        elif key.startswith('Socrates_'):
                            try:
                                num_str = key.split('_')[1]
                                num = int(num_str)
                                last_socrates_num = max(last_socrates_num, num)
                            except (IndexError, ValueError):
                                continue
                    
                    # KL√çƒåOV√Å OPRAVA: Pokraƒçuj od posledn√≠ho ƒç√≠sla + 1
                    next_tesla_num = last_tesla_num + 1
                    next_socrates_num = last_socrates_num + 1
                    
                    # CONTINUE ZPR√ÅVY - podcast
                    prompt = f"""Continue with another {WORDS_PER_PART} words.

Continue the Tesla vs Socrates dialogue about {topic}.

CRITICAL NUMBERING: Continue from where you left off:
- Next Tesla dialogue should be Tesla_{next_tesla_num:02d}
- Next Socrates dialogue should be Socrates_{next_socrates_num:02d}
- Continue alternating Tesla and Socrates from these numbers

Keep the philosophical discussion flowing naturally.

CRITICAL REQUIREMENT: Generate exactly {WORDS_PER_PART} words.
You need approximately {WORDS_PER_PART // 40} more dialogue blocks.

Output ONLY valid JSON with continued numbering.
Each dialogue block should be 35-45 words.

Example start:
{{
  "Tesla_{next_tesla_num:02d}": {{"voice_id": "fb6f5b20hmCY0fO9Gr8v", "text": "..."}},
  "Socrates_{next_socrates_num:02d}": {{"voice_id": "Ezn5SsWzN9rYHvvWrFnm", "text": "..."}},
  ...
}}

IMPORTANT: Count your words carefully and generate exactly {WORDS_PER_PART} words total."""
                    
                    print(f"üì§ Pos√≠l√°m CONTINUE ZPR√ÅVU #{part_num-1}: dal≈°√≠ch {WORDS_PER_PART} slov (podcast)")
                    print(f"üî¢ Posledn√≠ ƒç√≠sla: Tesla_{last_tesla_num:02d}, Socrates_{last_socrates_num:02d}")
                    print(f"üî¢ Pokraƒçov√°n√≠ od Tesla_{next_tesla_num:02d}, Socrates_{next_socrates_num:02d}")
                    
                else:  # document
                    # DOCUMENT: Narrator - OPRAVEN√Å LOGIKA
                    last_narrator_num = 0
                    
                    # Projdi v≈°echny kl√≠ƒçe a najdi nejvy≈°≈°√≠ ƒç√≠slo
                    for key in combined_json.keys():
                        if key.startswith('Narrator_'):
                            try:
                                # O≈°et≈ôi r≈Øzn√© form√°ty ƒç√≠slov√°n√≠ (01, 1, atd.)
                                num_str = key.split('_')[1]
                                num = int(num_str)
                                last_narrator_num = max(last_narrator_num, num)
                            except (IndexError, ValueError):
                                continue
                    
                    # KL√çƒåOV√Å OPRAVA: Pokraƒçuj od posledn√≠ho ƒç√≠sla + 1
                    next_narrator_num = last_narrator_num + 1
                    
                    # CONTINUE ZPR√ÅVY - document
                    prompt = f"""Continue with another {WORDS_PER_PART} words.

Continue the narration about {topic}.

CRITICAL NUMBERING: Continue from where you left off:
- Next narration block should be Narrator_{next_narrator_num:02d}
- Continue sequential numbering from this number

Keep the narration flowing naturally and informatively.

CRITICAL REQUIREMENT: Generate exactly {WORDS_PER_PART} words.
You need approximately {WORDS_PER_PART // 40} more narration blocks.

Output ONLY valid JSON with continued numbering.
Each narration block should be 35-45 words.

Example start:
{{
  "Narrator_{next_narrator_num:02d}": {{"voice_id": "{narrator_voice_id}", "text": "..."}},
  "Narrator_{next_narrator_num+1:02d}": {{"voice_id": "{narrator_voice_id}", "text": "..."}},
  ...
}}

IMPORTANT: Count your words carefully and generate exactly {WORDS_PER_PART} words total."""
                    
                    print(f"üì§ Pos√≠l√°m CONTINUE ZPR√ÅVU #{part_num-1}: dal≈°√≠ch {WORDS_PER_PART} slov (document)")
                    print(f"üî¢ Posledn√≠ ƒç√≠slo: Narrator_{last_narrator_num:02d}")
                    print(f"üî¢ Pokraƒçov√°n√≠ od Narrator_{next_narrator_num:02d}")
            
            # Po≈°li prompt assistantovi (pou≈æij NOV√ù Detail Assistant ID)
            response = send_to_assistant(thread_id, prompt, detail_assistant_id)
            
            try:
                # Parsuj JSON odpovƒõƒè
                part_json = json.loads(clean_json(response))
                
                # üîß NORMALIZACE ƒå√çSLOV√ÅN√ç - zajist√≠ konzistentn√≠ form√°t 01, 02, 03
                part_json = normalize_block_numbering(part_json)
                
                # Spoƒç√≠tej slova v t√©to ƒç√°sti
                part_words = 0
                for block_data in part_json.values():
                    if isinstance(block_data, dict) and 'text' in block_data:
                        part_words += len(block_data['text'].split())
                
                print(f"‚úÖ ƒå√°st {part_num}: {part_words} slov, {len(part_json)} blok≈Ø")
                
                # SCRIPT POUZE SPOJUJE (bez p≈ôeƒç√≠slov√°n√≠)
                combined_json.update(part_json)
                total_words += part_words
                
            except Exception as e:
                print(f"‚ùå Chyba p≈ôi parsov√°n√≠ ƒç√°sti {part_num}: {e}")
                if part_num == 1:
                    raise e
                else:
                    break
        
        print(f"üéâ HOTOVO: {total_words} slov z c√≠lov√Ωch {TARGET_TOTAL} ({total_words/TARGET_TOTAL*100:.1f}%)")
        print(f"üìã Celkem blok≈Ø: {len(combined_json)}")
        print(f"üìã Uk√°zka blok≈Ø: {list(combined_json.keys())[:5]}...")
        
        # CLEANUP: Sma≈æ vytvo≈ôen√Ω Detail Assistant
        try:
            delete_resp = requests.delete(
                f"https://api.openai.com/v1/assistants/{detail_assistant_id}",
                headers=headers,
                timeout=10
            )
            if delete_resp.status_code == 200:
                print(f"üóëÔ∏è Detail Assistant smaz√°n: {detail_assistant_id}")
            else:
                print(f"‚ö†Ô∏è Nepoda≈ôilo se smazat Detail Assistant: {delete_resp.status_code}")
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba p≈ôi maz√°n√≠ Detail Assistant: {e}")
        
        return jsonify({
            'success': True,
            'message': f'Segment vygenerov√°n postupnƒõ: {total_words} slov ({assistant_category})',
            'data': {
                'detail_assistant_id': detail_assistant_id,
                'thread_id': thread_id,
                'segment_content': combined_json,
                'word_count': total_words,
                'block_count': len(combined_json),
                'target_words': TARGET_TOTAL,
                'completion_percentage': round(total_words/TARGET_TOTAL*100, 1),
                'category': assistant_category
            }
        })
        
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi generov√°n√≠ segmentu: {e}")
        
        # CLEANUP: Sma≈æ vytvo≈ôen√Ω Detail Assistant i p≈ôi chybƒõ
        try:
            if 'detail_assistant_id' in locals():
                delete_resp = requests.delete(
                    f"https://api.openai.com/v1/assistants/{detail_assistant_id}",
                    headers=headers,
                    timeout=10
                )
                if delete_resp.status_code == 200:
                    print(f"üóëÔ∏è Detail Assistant smaz√°n po chybƒõ: {detail_assistant_id}")
        except Exception as cleanup_error:
            print(f"‚ö†Ô∏è Chyba p≈ôi maz√°n√≠ Detail Assistant po chybƒõ: {cleanup_error}")
        
        return jsonify({'error': str(e)}), 500

@app.route('/api/test-api-connections', methods=['POST'])
def test_api_connections():
    """
    Endpoint pro testov√°n√≠ API p≈ôipojen√≠
    """
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'Chyb√≠ JSON data'}), 400
        
        results = {}
        
        # Test OpenAI API
        openai_key = data.get('openai_api_key', '')
        if openai_key:
            try:
                url = "https://api.openai.com/v1/models"
                headers = {"Authorization": f"Bearer {openai_key}"}
                response = requests.get(url, headers=headers, timeout=10)
                
                if response.status_code == 200:
                    results['openai'] = {'status': 'success', 'message': 'OpenAI API p≈ôipojen√≠ √∫spƒõ≈°n√©'}
                else:
                    results['openai'] = {'status': 'error', 'message': f'OpenAI API chyba: {response.status_code}'}
            except Exception as e:
                results['openai'] = {'status': 'error', 'message': f'OpenAI API chyba: {str(e)}'}
        else:
            results['openai'] = {'status': 'skipped', 'message': 'OpenAI API kl√≠ƒç nen√≠ nastaven'}
        
        # Test ElevenLabs API
        elevenlabs_key = data.get('elevenlabs_api_key', '')
        if elevenlabs_key:
            try:
                url = "https://api.elevenlabs.io/v1/voices"
                headers = {"xi-api-key": elevenlabs_key}
                response = requests.get(url, headers=headers, timeout=10)
                
                if response.status_code == 200:
                    results['elevenlabs'] = {'status': 'success', 'message': 'ElevenLabs API p≈ôipojen√≠ √∫spƒõ≈°n√©'}
                else:
                    results['elevenlabs'] = {'status': 'error', 'message': f'ElevenLabs API chyba: {response.status_code}'}
            except Exception as e:
                results['elevenlabs'] = {'status': 'error', 'message': f'ElevenLabs API chyba: {str(e)}'}
        else:
            results['elevenlabs'] = {'status': 'skipped', 'message': 'ElevenLabs API kl√≠ƒç nen√≠ nastaven'}
        
        return jsonify({
            'success': True,
            'message': 'API testy dokonƒçeny',
            'results': results
        })
        
    except Exception as e:
        return jsonify({'error': f'Chyba p≈ôi testov√°n√≠ API: {str(e)}'}), 500

# Lok√°ln√≠ seznam skryt√Ωch asistent≈Ø (v re√°ln√© aplikaci by to bylo v datab√°zi)
hidden_assistants = set()

@app.route('/api/list-assistants', methods=['POST'])
def list_assistants():
    """
    Zobraz√≠ seznam asistent≈Ø (bez skryt√Ωch)
    """
    try:
        data = request.get_json()
        
        if not data or 'openai_api_key' not in data:
            return jsonify({'error': 'Chyb√≠ OpenAI API kl√≠ƒç'}), 400
        
        api_key = data['openai_api_key']
        
        if not api_key:
            return jsonify({'error': 'OpenAI API kl√≠ƒç je povinn√Ω'}), 400
        
        headers = {
            'Authorization': f'Bearer {api_key}',
            'Content-Type': 'application/json',
            'OpenAI-Beta': 'assistants=v2'
        }
        
        # Z√≠skej v≈°echny asistenty z OpenAI
        response = requests.get('https://api.openai.com/v1/assistants', headers=headers)
        
        if response.status_code != 200:
            return jsonify({'error': f'OpenAI API chyba: {response.text}'}), 400
        
        all_assistants = response.json().get('data', [])
        
        # Filtruj skryt√© asistenty
        visible_assistants = [
            assistant for assistant in all_assistants 
            if assistant['id'] not in hidden_assistants
        ]
        
        return jsonify({
            'assistants': visible_assistants,
            'total': len(visible_assistants),
            'hidden_count': len(hidden_assistants)
        })
        
    except Exception as e:
        return jsonify({'error': f'Chyba p≈ôi naƒç√≠t√°n√≠ asistent≈Ø: {str(e)}'}), 500

@app.route('/api/hide-assistant', methods=['POST'])
def hide_assistant():
    """
    Skryje asistenta z lok√°ln√≠ho seznamu (nema≈æe z OpenAI)
    """
    try:
        data = request.get_json()
        
        if not data or 'assistant_id' not in data:
            return jsonify({'error': 'Chyb√≠ ID asistenta'}), 400
        
        assistant_id = data['assistant_id']
        hidden_assistants.add(assistant_id)
        
        return jsonify({
            'success': True, 
            'message': f'Asistent {assistant_id} byl skryt z seznamu',
            'hidden_count': len(hidden_assistants)
        })
        
    except Exception as e:
        return jsonify({'error': f'Chyba p≈ôi skr√Ωv√°n√≠ asistenta: {str(e)}'}), 500

@app.route('/api/hide-multiple-assistants', methods=['POST'])
def hide_multiple_assistants():
    """
    Skryje v√≠ce asistent≈Ø najednou z lok√°ln√≠ho seznamu
    """
    try:
        data = request.get_json()
        
        if not data or 'assistant_ids' not in data:
            return jsonify({'error': 'Chyb√≠ seznam ID asistent≈Ø'}), 400
        
        assistant_ids = data['assistant_ids']
        
        if not isinstance(assistant_ids, list):
            return jsonify({'error': 'assistant_ids mus√≠ b√Ωt seznam'}), 400
        
        for assistant_id in assistant_ids:
            hidden_assistants.add(assistant_id)
        
        return jsonify({
            'success': True,
            'message': f'Skryto {len(assistant_ids)} asistent≈Ø z seznamu',
            'hidden_count': len(hidden_assistants)
        })
        
    except Exception as e:
        return jsonify({'error': f'Chyba p≈ôi skr√Ωv√°n√≠ asistent≈Ø: {str(e)}'}), 500

@app.route('/api/show-assistant', methods=['POST'])
def show_assistant():
    """
    Zobraz√≠ skryt√©ho asistenta zpƒõt v seznamu
    """
    try:
        data = request.get_json()
        
        if not data or 'assistant_id' not in data:
            return jsonify({'error': 'Chyb√≠ ID asistenta'}), 400
        
        assistant_id = data['assistant_id']
        
        if assistant_id in hidden_assistants:
            hidden_assistants.remove(assistant_id)
            message = f'Asistent {assistant_id} je nyn√≠ znovu viditeln√Ω'
        else:
            message = f'Asistent {assistant_id} nebyl skryt√Ω'
        
        return jsonify({
            'success': True,
            'message': message,
            'hidden_count': len(hidden_assistants)
        })
        
    except Exception as e:
        return jsonify({'error': f'Chyba p≈ôi zobrazov√°n√≠ asistenta: {str(e)}'}), 500

@app.route('/api/list-hidden-assistants', methods=['POST'])
def list_hidden_assistants():
    """
    Zobraz√≠ seznam skryt√Ωch asistent≈Ø
    """
    try:
        data = request.get_json()
        
        if not data or 'openai_api_key' not in data:
            return jsonify({'error': 'Chyb√≠ OpenAI API kl√≠ƒç'}), 400
        
        api_key = data['openai_api_key']
        
        if not api_key:
            return jsonify({'error': 'OpenAI API kl√≠ƒç je povinn√Ω'}), 400
        
        headers = {
            'Authorization': f'Bearer {api_key}',
            'Content-Type': 'application/json',
            'OpenAI-Beta': 'assistants=v2'
        }
        
        # Z√≠skej v≈°echny asistenty z OpenAI
        response = requests.get('https://api.openai.com/v1/assistants', headers=headers)
        
        if response.status_code != 200:
            return jsonify({'error': f'OpenAI API chyba: {response.text}'}), 400
        
        all_assistants = response.json().get('data', [])
        
        # Najdi pouze skryt√© asistenty
        hidden_assistants_details = [
            assistant for assistant in all_assistants 
            if assistant['id'] in hidden_assistants
        ]
        
        return jsonify({
            'hidden_assistants': hidden_assistants_details,
            'hidden_count': len(hidden_assistants)
        })
        
    except Exception as e:
        return jsonify({'error': f'Chyba p≈ôi naƒç√≠t√°n√≠ skryt√Ωch asistent≈Ø: {str(e)}'}), 500

@app.route('/api/clear-hidden-assistants', methods=['POST'])
def clear_hidden_assistants():
    """
    Zobraz√≠ v≈°echny skryt√© asistenty zpƒõt (vyma≈æe lok√°ln√≠ seznam skryt√Ωch)
    """
    try:
        global hidden_assistants
        count = len(hidden_assistants)
        hidden_assistants.clear()
        
        return jsonify({
            'success': True,
            'message': f'Zobrazeno {count} d≈ô√≠ve skryt√Ωch asistent≈Ø',
            'hidden_count': 0
        })
        
    except Exception as e:
        return jsonify({'error': f'Chyba p≈ôi maz√°n√≠ seznamu skryt√Ωch: {str(e)}'}), 500

# NOV√Å FUNKCE PRO NORMALIZACI ƒå√çSLOV√ÅN√ç
def normalize_block_numbering(json_data):
    """
    Normalizuje ƒç√≠slov√°n√≠ blok≈Ø na form√°t Tesla_01, Socrates_01, Narrator_01
    P≈ôevede Tesla_1 -> Tesla_01, Socrates_2 -> Socrates_02, atd.
    """
    normalized_data = {}
    
    for key, value in json_data.items():
        # Zkontroluj, jestli kl√≠ƒç obsahuje ƒç√≠slo
        if '_' in key:
            prefix, number_str = key.rsplit('_', 1)
            try:
                # Pokus se p≈ôev√©st ƒç√≠slo
                number = int(number_str)
                # Vytvo≈ô nov√Ω kl√≠ƒç s form√°tovan√Ωm ƒç√≠slem (01, 02, atd.)
                new_key = f"{prefix}_{number:02d}"
                normalized_data[new_key] = value
                print(f"üîß Normalizace: {key} ‚Üí {new_key}")
            except ValueError:
                # Pokud ƒç√≠slo nejde p≈ôev√©st, ponech p≈Øvodn√≠ kl√≠ƒç
                normalized_data[key] = value
        else:
            # Kl√≠ƒç bez ƒç√≠sla - ponech beze zmƒõny
            normalized_data[key] = value
    
    return normalized_data

if __name__ == '__main__':
    print("üéµ AI Voice Block Combiner Backend")
    print("üìÇ Upload folder:", UPLOAD_FOLDER)
    print("üìÅ Output folder:", OUTPUT_FOLDER)
    print("üåê Server bƒõ≈æ√≠ na: http://localhost:5000")
    # Spu≈°tƒõn√≠ bez vestavƒõn√©ho reloaderu, aby server nespadl p≈ôi bƒõhu na pozad√≠
    # Pou≈æ√≠v√°me debug=False, proto≈æe printujeme vlastn√≠ ladic√≠ zpr√°vy a reloader by v pozad√≠ zp≈Øsoboval chyby termios
    app.run(debug=False, host='0.0.0.0', port=5000, use_reloader=False) 